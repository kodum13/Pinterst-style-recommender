from pathlib import Path
import numpy as np
import joblib
from keras.preprocessing import image
from keras.applications import vgg16

# Path to folders with training data
good_path = Path("images") / "good"
bad_path = Path("images") / "bad"

images = []
labels = []

# Load and label the bad style images
for img in bad_path.glob("*.jpg"):
    # Load the image from disk
    img = image.load_img(img, target_size=(64, 64))

    # Convert the image to a numpy array
    image_array = image.img_to_array(img)
    
    # Add the image to the list of images
    images.append(image_array)

    # Add the label of 0
    labels.append(0)

# Load and label the good style images
for img in good_path.glob("*.jpg"):
    # Load the image from disk
    img = image.load_img(img, target_size=(64, 64))

    # Convert the image to a numpy array
    image_array = image.img_to_array(img)
   
    # Add the image to the list of images
    images.append(image_array)

    # Add the label of 1
    labels.append(1)

# Create a single numpy array with all the images loaded
x_train = np.array(images)

# Also convert the labels to a numpy array
y_train = np.array(labels)

# Normalize image data to 0-to-1 range
x_train = vgg16.preprocess_input(x_train)

# Load a pre-trained neural network to use as a feature extractor
# 64 input shape
pretrained_nn = vgg16.VGG16(weights='imagenet', include_top=False, input_shape=(64, 64, 3))

# Extract features for each image
features_x = pretrained_nn.predict(x_train)

# Save the array of extracted features to a file
joblib.dump(features_x, "x_train.dat")

# Save the matching array of expected values to a file
joblib.dump(y_train, "y_train.dat")
