from keras.models import model_from_json
from pathlib import Path
from keras.preprocessing import image
import numpy as np
from keras.applications import vgg16
import pinterest_recs
from py3pin.Pinterest import Pinterest
import joblib

pinterest = Pinterest(email='your_email@gmail.com',
                      password='your_password',
                      username='your_username',
                      cred_root='cred_root')

boards = pinterest.boards()
# New board created for reviewing the recommended pins
rec_board = boards[16]
rec_id = rec_board['id']

# Load the json file that contains the model's structure
f = Path("model_structure.json")
model_structure = f.read_text()

# Recreate the Keras model object from the json data
model = model_from_json(model_structure)

# Re-load the model's trained weights
model.load_weights("model_weights.h5")

# Path to folders with training data
recs_path = Path("images") / "recs"

images = []
list_img = []
for pic in recs_path.glob("*.jpg"):
    list_img.append(pic)
    # Load an image file to test, resizing it to 64x64 pixels (as required by this model)
    img = image.load_img(pic, target_size=(64, 64))

    # Convert the image to a numpy array
    image_array = image.img_to_array(img)

    # Add the image to the list of images
    images.append(image_array)

# Normalize the data
images = np.array(images)
images = vgg16.preprocess_input(images)

# Use the pre-trained neural network to extract features from our test image
feature_extraction_model = vgg16.VGG16(weights='imagenet', include_top=False, input_shape=(64, 64, 3))
features = feature_extraction_model.predict(images)

# Given the extracted features, make a final prediction using our own model
results = model.predict(features)

# Check the first result as an example
single_result = results[0][0]

# Print the result
print("Likelihood that I like this outfit: {}%".format(int(single_result * 100)))

# Get the dictionary of ids to urls
rec_dict = joblib.load("rec_dict.dat")


def pin_to_board(board_id='',
        section_id=None,
        image_url='https://i.pinimg.com/170x/32/78/bd/3278bd27073e1ec9c8a708409279768b.jpg',
        description='Auto pin',
        title='Your recommended outfit',
        link='https://www.google.com/'):
    return pinterest.pin(board_id=board_id, section_id=section_id, image_url=image_url, description=description,
                         title=title, link=link)

# If the model recommends the pin 100% then add it to the new Pinterest board
import os
for i in range(len(results)):
    print(results[i][0])
    if results[i][0] > .99:
        pic = os.path.basename(list_img[i])
        if pic[:-4] in rec_dict.keys():
            url = rec_dict[pic[:-4]]
            pin_to_board(rec_id, image_url = url)
